Index: gcc/config/alpha/linux.h
===================================================================
--- gcc/config/alpha/linux.h	(版本 1)
+++ gcc/config/alpha/linux.h	(工作副本)
@@ -78,7 +78,7 @@
     else if (pc_[1] == 0x201f015f)	/* lda $0,NR_rt_sigreturn */	\
       {									\
 	struct rt_sigframe {						\
-	  struct siginfo info;						\
+	  siginfo_t info;						\
 	  struct ucontext uc;						\
 	} *rt_ = (CONTEXT)->cfa;					\
 	sc_ = &rt_->uc.uc_mcontext;					\
Index: gcc/config/i386/linux.h
===================================================================
--- gcc/config/i386/linux.h	(版本 1)
+++ gcc/config/i386/linux.h	(工作副本)
@@ -243,9 +243,9 @@
       {									\
 	struct rt_sigframe {						\
 	  int sig;							\
-	  struct siginfo *pinfo;					\
+	  siginfo_t *pinfo;					\
 	  void *puc;							\
-	  struct siginfo info;						\
+	  siginfo_t info;						\
 	  struct ucontext uc;						\
 	} *rt_ = (CONTEXT)->cfa;					\
 	sc_ = (struct sigcontext *) &rt_->uc.uc_mcontext;		\
Index: gcc/config/i386/linux64.h
===================================================================
--- gcc/config/i386/linux64.h	(版本 32)
+++ gcc/config/i386/linux64.h	(工作副本)
@@ -154,9 +154,9 @@
       {									\
 	struct rt_sigframe {						\
 	  int sig;							\
-	  struct siginfo *pinfo;					\
+	  siginfo_t *pinfo;					\
 	  void *puc;							\
-	  struct siginfo info;						\
+	  siginfo_t info;						\
 	  struct ucontext uc;						\
 	} *rt_ = (CONTEXT)->cfa;					\
 	sc_ = (struct sigcontext *) &rt_->uc.uc_mcontext;		\
Index: gcc/config/ia64/linux.h
===================================================================
--- gcc/config/ia64/linux.h	(版本 1)
+++ gcc/config/ia64/linux.h	(工作副本)
@@ -67,7 +67,7 @@
       struct sigframe {							\
 	char scratch[16];						\
 	unsigned long sig_number;					\
-	struct siginfo *info;						\
+	siginfo_t *info;						\
 	struct sigcontext *sc;						\
       } *frame_ = (struct sigframe *)(CONTEXT)->psp;			\
       struct sigcontext *sc_ = frame_->sc;				\
Index: libstdc++-v3/config/locale/generic/c++locale_internal.h
===================================================================
--- libstdc++-v3/config/locale/generic/c++locale_internal.h	(版本 0)
+++ libstdc++-v3/config/locale/generic/c++locale_internal.h	(工作副本)
@@ -0,0 +1,30 @@
+// Locale internal implementation header -*- C++ -*-
+
+// Copyright (C) 2002 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 2, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING.  If not, write to the Free
+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+// USA.
+
+// As a special exception, you may use this file as part of a free software
+// library without restriction.  Specifically, if other files instantiate
+// templates or use macros or inline functions from this file, or you compile
+// this file and link it with other files to produce an executable, this
+// file does not by itself cause the resulting executable to be covered by
+// the GNU General Public License.  This exception does not however
+// invalidate any other reasons why the executable file might be covered by
+// the GNU General Public License.
+
+// The generic locale code doesn't need to do anything here (yet)
Index: libstdc++-v3/config/locale/gnu/c++locale_internal.h
===================================================================
--- libstdc++-v3/config/locale/gnu/c++locale_internal.h	(版本 0)
+++ libstdc++-v3/config/locale/gnu/c++locale_internal.h	(工作副本)
@@ -0,0 +1,59 @@
+// Prototypes for GLIBC thread locale __-prefixed functions -*- C++ -*-
+
+// Copyright (C) 2002 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 2, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// You should have received a copy of the GNU General Public License along
+// with this library; see the file COPYING.  If not, write to the Free
+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
+// USA.
+
+// As a special exception, you may use this file as part of a free software
+// library without restriction.  Specifically, if other files instantiate
+// templates or use macros or inline functions from this file, or you compile
+// this file and link it with other files to produce an executable, this
+// file does not by itself cause the resulting executable to be covered by
+// the GNU General Public License.  This exception does not however
+// invalidate any other reasons why the executable file might be covered by
+// the GNU General Public License.
+
+// Written by Jakub Jelinek <jakub@redhat.com>
+
+#include <clocale>
+
+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
+                                                  
+extern "C" __typeof(iswctype_l) __iswctype_l;
+extern "C" __typeof(nl_langinfo_l) __nl_langinfo_l;
+extern "C" __typeof(strcoll_l) __strcoll_l;
+extern "C" __typeof(strftime_l) __strftime_l;
+extern "C" __typeof(strtod_l) __strtod_l;
+extern "C" __typeof(strtof_l) __strtof_l;
+extern "C" __typeof(strtold_l) __strtold_l;
+extern "C" __typeof(strtol_l) __strtol_l;
+extern "C" __typeof(strtoll_l) __strtoll_l;
+extern "C" __typeof(strtoul_l) __strtoul_l;
+extern "C" __typeof(strtoull_l) __strtoull_l;
+extern "C" __typeof(strxfrm_l) __strxfrm_l;
+extern "C" __typeof(towlower_l) __towlower_l;
+extern "C" __typeof(towupper_l) __towupper_l;
+extern "C" __typeof(wcscoll_l) __wcscoll_l;
+extern "C" __typeof(wcsftime_l) __wcsftime_l;
+extern "C" __typeof(wcsxfrm_l) __wcsxfrm_l;
+extern "C" __typeof(wctype_l) __wctype_l;
+extern "C" __typeof(newlocale) __newlocale;
+extern "C" __typeof(freelocale) __freelocale;
+extern "C" __typeof(duplocale) __duplocale;
+extern "C" __typeof(uselocale) __uselocale;
+
+#endif // GLIBC 2.3 and later
Index: libstdc++-v3/config/locale/gnu/c_locale.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/c_locale.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/c_locale.cc	(工作副本)
@@ -36,6 +36,7 @@
 #include <locale>
 #include <stdexcept>
 #include <langinfo.h>
+#include "c++locale_internal.h"
 
 namespace std 
 {
Index: libstdc++-v3/config/locale/gnu/collate_members.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/collate_members.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/collate_members.cc	(工作副本)
@@ -34,6 +34,7 @@
 // Written by Benjamin Kosnik <bkoz@redhat.com>
 
 #include <locale>
+#include "c++locale_internal.h"
 
 namespace std
 {
Index: libstdc++-v3/config/locale/gnu/ctype_members.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/ctype_members.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/ctype_members.cc	(工作副本)
@@ -34,6 +34,7 @@
 // Written by Benjamin Kosnik <bkoz@redhat.com>
 
 #include <locale>
+#include "c++locale_internal.h"
 
 namespace std
 {
Index: libstdc++-v3/config/locale/gnu/messages_members.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/messages_members.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/messages_members.cc	(工作副本)
@@ -34,6 +34,7 @@
 // Written by Benjamin Kosnik <bkoz@redhat.com>
 
 #include <locale>
+#include "c++locale_internal.h"
 
 namespace std
 {
Index: libstdc++-v3/config/locale/gnu/messages_members.h
===================================================================
--- libstdc++-v3/config/locale/gnu/messages_members.h	(版本 1)
+++ libstdc++-v3/config/locale/gnu/messages_members.h	(工作副本)
@@ -32,6 +32,9 @@
 //
 
 // Written by Benjamin Kosnik <bkoz@redhat.com>
+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
+extern "C" __typeof(uselocale) __uselocale;
+#endif
 
   // Non-virtual member functions.
   template<typename _CharT>
Index: libstdc++-v3/config/locale/gnu/monetary_members.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/monetary_members.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/monetary_members.cc	(工作副本)
@@ -34,6 +34,7 @@
 // Written by Benjamin Kosnik <bkoz@redhat.com>
 
 #include <locale>
+#include "c++locale_internal.h"
 
 namespace std
 {
Index: libstdc++-v3/config/locale/gnu/numeric_members.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/numeric_members.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/numeric_members.cc	(工作副本)
@@ -34,6 +34,7 @@
 // Written by Benjamin Kosnik <bkoz@redhat.com>
 
 #include <locale>
+#include "c++locale_internal.h"
 
 namespace std
 {
Index: libstdc++-v3/config/locale/gnu/time_members.cc
===================================================================
--- libstdc++-v3/config/locale/gnu/time_members.cc	(版本 1)
+++ libstdc++-v3/config/locale/gnu/time_members.cc	(工作副本)
@@ -35,6 +35,7 @@
 // Written by Benjamin Kosnik <bkoz@redhat.com>
 
 #include <locale>
+#include "c++locale_internal.h"
 
 namespace std
 {
@@ -52,7 +53,7 @@
 	   const tm* __tm) const
     {
 #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
-      __strftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);
+      __strftime_l(__s, __maxlen, __format, __tm, _M_c_locale_timepunct);
 #else
       char* __old = strdup(setlocale(LC_ALL, NULL));
       setlocale(LC_ALL, _M_name_timepunct);
@@ -202,7 +203,7 @@
 	   const tm* __tm) const
     {
 #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
-      __wcsftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);
+      __wcsftime_l(__s, __maxlen,  __format, __tm, _M_c_locale_timepunct);
 #else
       char* __old = strdup(setlocale(LC_ALL, NULL));
       setlocale(LC_ALL, _M_name_timepunct);
Index: libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h
===================================================================
--- libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h	(版本 1)
+++ libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h	(工作副本)
@@ -42,7 +42,19 @@
 
   const ctype_base::mask*
   ctype<char>::classic_table() throw()
-  { return __ctype_b; }  
+  { 
+          const ctype_base::mask* __ret;
+              char* __old = strdup(setlocale(LC_CTYPE, NULL));
+                  setlocale(LC_CTYPE, "C");
+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
+                      __ret = *__ctype_b_loc();
+#else
+                          __ret = __ctype_b;
+#endif
+                              setlocale(LC_CTYPE, __old);
+                                  free(__old);
+                                      return __ret;
+  }  
   
 #if _GLIBCPP_C_LOCALE_GNU
   ctype<char>::ctype(__c_locale __cloc, const mask* __table, bool __del, 
@@ -57,18 +69,35 @@
 #else
   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, 
 		     size_t __refs) 
-  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), 
-  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),
-  _M_table(__table ? __table : classic_table())
-  { _M_c_locale_ctype = _S_c_locale; }
+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del)
+  { 
+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
+          _M_toupper = *__ctype_toupper_loc();
+              _M_tolower = *__ctype_tolower_loc();
+                  _M_table = __table ? __table : *__ctype_b_loc();
+#else
+                      _M_toupper = __ctype_toupper;
+                          _M_tolower = __ctype_tolower;
+                              _M_table = __table ? __table : __ctype_b;
 #endif
+      _M_c_locale_ctype = _S_c_locale; }
+#endif
 
   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : 
-  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), 
-  _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),
-  _M_table(__table ? __table : classic_table())
-  { _M_c_locale_ctype = _S_c_locale; }
+  __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del) 
+  {
+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)
+          _M_toupper = *__ctype_toupper_loc();
+              _M_tolower = *__ctype_tolower_loc();
+                  _M_table = __table ? __table : *__ctype_b_loc();
+#else
+                      _M_toupper = __ctype_toupper;
+                          _M_tolower = __ctype_tolower;
+                              _M_table = __table ? __table : __ctype_b;
+#endif
 
+      _M_c_locale_ctype = _S_c_locale; }
+
   char
   ctype<char>::do_toupper(char __c) const
   { return _M_toupper[static_cast<unsigned char>(__c)]; }
Index: libstdc++-v3/configure
===================================================================
--- libstdc++-v3/configure	(版本 1)
+++ libstdc++-v3/configure	(工作副本)
@@ -3011,6 +3011,7 @@
       CMONEY_CC=config/locale/generic/monetary_members.cc
       CNUMERIC_CC=config/locale/generic/numeric_members.cc
       CTIME_CC=config/locale/generic/time_members.cc
+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h
       ;;
     xgnu)
       echo "$ac_t""gnu" 1>&6
@@ -3072,6 +3073,7 @@
       CMONEY_CC=config/locale/gnu/monetary_members.cc
       CNUMERIC_CC=config/locale/gnu/numeric_members.cc
       CTIME_CC=config/locale/gnu/time_members.cc
+      CLOCALE_INTERNAL_H=config/locale/gnu/c++locale_internal.h
       ;;
     xieee_1003.1-2001)
       echo "$ac_t""generic" 1>&6
@@ -3086,6 +3088,7 @@
       CMONEY_CC=config/locale/generic/monetary_members.cc
       CNUMERIC_CC=config/locale/generic/numeric_members.cc
       CTIME_CC=config/locale/generic/time_members.cc
+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h
       ;;
     *)
       echo "$enable_clocale is an unknown locale package" 1>&2
@@ -22659,8 +22662,8 @@
 EOF
 
 cat >> $CONFIG_STATUS <<EOF
-ac_sources="$BASIC_FILE_CC $CLOCALE_CC $CCOLLATE_CC $CCTYPE_CC $CMESSAGES_CC $CMONEY_CC $CNUMERIC_CC $CTIME_CC $LINKER_MAP"
-ac_dests="src/basic_file.cc src/c++locale.cc src/collate.cc src/ctype.cc src/messages.cc src/monetary.cc src/numeric.cc src/time.cc src/linker.map"
+ac_sources="$BASIC_FILE_CC $CLOCALE_CC $CCOLLATE_CC $CCTYPE_CC $CMESSAGES_CC $CMONEY_CC $CNUMERIC_CC $CTIME_CC $CLOCALE_INTERNAL_H $LINKER_MAP"
+ac_dests="src/basic_file.cc src/c++locale.cc src/collate.cc src/ctype.cc src/messages.cc src/monetary.cc src/numeric.cc src/time.cc src/c++locale_internal.h src/linker.map"
 EOF
 
 cat >> $CONFIG_STATUS <<\EOF
